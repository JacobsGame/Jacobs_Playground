/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/models/characters/Character_Soldier.gltf -t 
*/

import * as THREE from "three";
import React, { useEffect, useMemo, useRef } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { Group } from "three";
import { GroupProps, useGraph } from "@react-three/fiber";
import { SkeletonUtils } from "three-stdlib";
import { Color } from "playroomkit";

type GLTFResult = GLTF & {
    nodes: {
        Cube003: THREE.Mesh;
        Cube003_1: THREE.Mesh;
        Cube003_2: THREE.Mesh;
        ShoulderPadL: THREE.Mesh;
        Cube276: THREE.Mesh;
        Cube276_1: THREE.Mesh;
        Cube276_2: THREE.Mesh;
        Cube276_3: THREE.Mesh;
        Cylinder019: THREE.Mesh;
        Cylinder019_1: THREE.Mesh;
        Cylinder019_2: THREE.Mesh;
        Cylinder019_3: THREE.Mesh;
        Cube300: THREE.Mesh;
        Cube300_1: THREE.Mesh;
        Cube300_2: THREE.Mesh;
        Cube300_3: THREE.Mesh;
        Cylinder027: THREE.Mesh;
        Cylinder027_1: THREE.Mesh;
        Cylinder027_2: THREE.Mesh;
        Cube022: THREE.Mesh;
        Cube022_1: THREE.Mesh;
        Cube022_2: THREE.Mesh;
        Cube016: THREE.Mesh;
        Cube016_1: THREE.Mesh;
        Cube016_2: THREE.Mesh;
        Cube016_3: THREE.Mesh;
        Cube290: THREE.Mesh;
        Cube290_1: THREE.Mesh;
        Cube290_2: THREE.Mesh;
        Cube290_3: THREE.Mesh;
        Cube298: THREE.Mesh;
        Cube298_1: THREE.Mesh;
        Cube298_2: THREE.Mesh;
        Cube298_3: THREE.Mesh;
        Cube000: THREE.Mesh;
        Cube000_1: THREE.Mesh;
        Cube000_2: THREE.Mesh;
        Cube283: THREE.Mesh;
        Cube283_1: THREE.Mesh;
        Cube283_2: THREE.Mesh;
        Cube283_3: THREE.Mesh;
        Cylinder025: THREE.Mesh;
        Cylinder025_1: THREE.Mesh;
        Cylinder025_2: THREE.Mesh;
        Cube052: THREE.Mesh;
        Cube052_1: THREE.Mesh;
        Cube052_2: THREE.Mesh;
        Cube052_3: THREE.Mesh;
        Cube312: THREE.Mesh;
        Cube312_1: THREE.Mesh;
        Cube312_2: THREE.Mesh;
        Cube282: THREE.Mesh;
        Cube282_1: THREE.Mesh;
        Cube282_2: THREE.Mesh;
        ShoulderPadR: THREE.Mesh;
        Cube004: THREE.SkinnedMesh;
        Cube004_1: THREE.SkinnedMesh;
        Cube004_2: THREE.SkinnedMesh;
        Cube004_3: THREE.SkinnedMesh;
        Cube004_4: THREE.SkinnedMesh;
        Root: THREE.Bone;
        Body: THREE.Group;
        Head: THREE.Group;
    };
    materials: {
        Grey: THREE.MeshStandardMaterial;
        Character_Main: THREE.MeshStandardMaterial;
        Black: THREE.MeshStandardMaterial;
        Grey2: THREE.MeshStandardMaterial;
        Wood: THREE.MeshStandardMaterial;
        DarkGrey: THREE.MeshStandardMaterial;
        LightGrey: THREE.MeshStandardMaterial;
        Red: THREE.MeshStandardMaterial;
        DarkWood: THREE.MeshStandardMaterial;
        Skin: THREE.MeshStandardMaterial;
        Pants: THREE.MeshStandardMaterial;
    };
    animations: GLTFAction[];
};

export type ActionName =
    | "Death"
    | "Duck"
    | "HitReact"
    | "Idle"
    | "Idle_Shoot"
    | "Jump"
    | "Jump_Idle"
    | "Jump_Land"
    | "No"
    | "Punch"
    | "Run"
    | "Run_Gun"
    | "Run_Shoot"
    | "Walk"
    | "Walk_Shoot"
    | "Wave"
    | "Yes";
interface GLTFAction extends THREE.AnimationClip {
    name: ActionName;
}
type ContextType = Record<
    string,
    React.ForwardRefExoticComponent<
        | JSX.IntrinsicElements["mesh"]
        | JSX.IntrinsicElements["skinnedMesh"]
        | JSX.IntrinsicElements["bone"]
    >
>;

const WEAPONS = [
    "GrenadeLauncher",
    "AK",
    "Knife_1",
    "Knife_2",
    "Pistol",
    "Revolver",
    "Revolver_Small",
    "RocketLauncher",
    "ShortCannon",
    "SMG",
    "Shotgun",
    "Shovel",
    "Sniper",
    "Sniper_2",
];

interface CharacterSoldierProps extends GroupProps {
    color: string;
    animation: string;
    weapon: string;
}

export function CharacterSoldier({
    color = "black",
    animation = "Idle",
    weapon = "AK",
    ...props
}: CharacterSoldierProps) {
    const group = useRef<THREE.Group>(null);
    const { scene, materials, animations } = useGLTF(
        "./models/characters/Character_Soldier.gltf"
    ) as GLTFResult;

    const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);
    const { nodes } = useGraph(clone) as GLTFResult & any;
    const { actions } = useAnimations(animations, group);
    if (actions["Death"]) {
        actions["Death"].loop = THREE.LoopOnce;
        actions["Death"].clampWhenFinished = true;
    }

    useEffect(() => {
        actions[animation as ActionName]?.reset().fadeIn(0.2).play();

        // 在 useEffect 內部定義清理函數
        const cleanup = () => {
            actions[animation as ActionName]?.fadeOut(0.2);
        };
        return cleanup;
    }, [animation]);

    const playerColorMaterial = useMemo(
        () =>
            new THREE.MeshStandardMaterial({
                color: new THREE.Color(color),
            }),
        [color]
    );

    useEffect(() => {
        // HIDING NON-SELECTED WEAPONS
        WEAPONS.forEach((wp) => {
            const isCurrentWeapon = wp === weapon;
            nodes[wp].visible = isCurrentWeapon;
        });

        // ASSIGNING CHARACTER COLOR
        nodes.Body.traverse((child: THREE.Object3D) => {
            if (!(child instanceof THREE.Mesh)) {
                return;
            }
            if (child.isMesh && child.material.name === "Character_Main") {
                child.material = playerColorMaterial;
            }
            if (child.isMesh) {
                child.castShadow = true;
                child.receiveShadow = true;
            }
        });
        nodes.Head.traverse((child: THREE.Object3D) => {
            if (!(child instanceof THREE.Mesh)) {
                return;
            }
            if (child.isMesh && child.material.name === "Character_Main") {
                child.material = playerColorMaterial;
            }
        });
        clone.traverse((child: THREE.Object3D) => {
            if (!(child instanceof THREE.Mesh)) {
                return;
            }
            if (child.isMesh && child.material.name === "Character_Main") {
                child.material = playerColorMaterial;
            }
            if (child.isMesh) {
                child.castShadow = true;
            }
        });
    }, [nodes, clone]);

    return (
        <group ref={group} {...props} dispose={null}>
            <group name="Scene">
                <group name="CharacterArmature">
                    <primitive object={nodes.Root} />
                    <group name="Body_1">
                        <skinnedMesh
                            name="Cube004"
                            geometry={nodes.Cube004.geometry}
                            material={materials.Skin}
                            skeleton={nodes.Cube004.skeleton}
                        />
                        <skinnedMesh
                            name="Cube004_1"
                            geometry={nodes.Cube004_1.geometry}
                            material={materials.DarkGrey}
                            skeleton={nodes.Cube004_1.skeleton}
                        />
                        <skinnedMesh
                            name="Cube004_2"
                            geometry={nodes.Cube004_2.geometry}
                            material={materials.Pants}
                            skeleton={nodes.Cube004_2.skeleton}
                        />
                        <skinnedMesh
                            name="Cube004_3"
                            geometry={nodes.Cube004_3.geometry}
                            material={materials.Character_Main}
                            skeleton={nodes.Cube004_3.skeleton}
                        />
                        <skinnedMesh
                            name="Cube004_4"
                            geometry={nodes.Cube004_4.geometry}
                            material={materials.Black}
                            skeleton={nodes.Cube004_4.skeleton}
                        />
                    </group>
                </group>
            </group>
        </group>
    );
}

useGLTF.preload("./models/characters/Character_Soldier.gltf");
